/* var vs let */

// 'var' can be used before it's declared. It will just show 'undefined'.
// console.log(a); // undefined
// var a = 5;

// But 'let' cannot be used before declaration. It gives an error.
// console.log(b); // тЭМ Error: Cannot access 'b' before initialization
// let b = 10;

// тЬЕ Tip: It's better to use 'let' or 'const' instead of 'var'.


/* Add, Subtract, Multiply, and Divide two variables */

// let x = 10;
// let y = 5;

// console.log(x + y); // Addition тЖТ 15
// console.log(x - y); // Subtraction тЖТ 5
// console.log(x * y); // Multiplication тЖТ 50
// console.log(x / y); // Division тЖТ 2



/* How to check the data type of a variable */

// let a = 12;
// let b = "13";

// The + operator adds numbers, but if one is a string, it joins them (concatenation).
// console.log(a + b);        // "1213" тЖТ Not number addition
// console.log(typeof (a + b)); // "string"

// тЬЕ 'typeof' tells you the data type of a value.
// console.log(typeof a); // number
// console.log(typeof b); // string


/* Operand vs Operator */

// + - * / тЖТ These are called **operators**
// They are used to do math (like add, subtract, multiply, divide)

// let a = 10;
// let b = 5;

// console.log(a + b); // 15

// In this line:
// '+' is the **operator**
// 'a' and 'b' are the **operands**

/*
ЁЯСЙ Easy way to remember:
- Operator = the symbol (+, -, *, /)
- Operand = the number or value beside the symbol
*/


/* Sum message */

// let a = 10;
// let b = 20;
// console.log("Sum of 10 and 20 is " + a + b);


// ЁЯза Why it shows "Sum of 10 and 20 is 1020" instead of adding 10 + 20?

// ЁЯСЙ JavaScript sees the + symbol and does this:

// First: "Sum of 10 and 20 is " + a тЖТ This becomes "Sum of 10 and 20 is 10"

// Then: "Sum of 10 and 20 is 10" + b тЖТ This becomes "Sum of 10 and 20 is 1020"

// ЁЯТб Because the first part is a string, JavaScript treats everything after it as string too тАФ this is called concatenation (joining strings).


//тЬЕ Correct way to show the actual sum:

// let a = 10;
// let b = 20;
// console.log("Sum of 10 and 20 is " + (a + b)); // Output: Sum of 10 and 20 is 30


// let a = 10;
// let b = 20;
// console.log( a + b + "Sum of 10 and 20 is 30");

// ржПржЦрж╛ржирзЗ рзйрзж ржХрзЗржи рж╣рж▓рзЛ ржХрж╛рж░ржг ржЬрзЗржПрж╕ рж▓рж╛ржЗржи ржмрж╛ржЗ рж▓рж╛ржЗржи ржХрзЛржб ржкржбрж╝рзЗ ржпржЦржи рж╕рзЗ ржжрзЗржЦрж▓рзЛ ржЕрзНржпрж╛ржбрж┐рж╢ржи рж╕рж┐ржорзНржмрж▓ ржПрж░ ржжрзБржЗржкрж╛рж╢рзЗрж░ ржжрзБржЗржЯрж╛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржирж╛ржорзНржмрж╛рж░ рждржЦржи рж╕рзЗ ржирж╛ржорзНржмрж╛рж░ ржпрзЛржЧ ржХрж░рж▓рзЛ рждрж╛рж░ржкрж░ ржкрж╛рж╢рзЗрж░ рж╕рзНржЯрзНрж░рж┐ржВ ржПрж░ рж╕рж╛ржерзЗ ржХржиржХрж╛ржЯ ржХрж░рж▓рзЛ

// ржХрзЗржи ржЖржЙржЯржкрзБржЯ рж╣рж▓рзЛ 30Sum of 10 and 20 is 30?

// ЁЯСЙ JavaScript ржХрзЛржбржЯрж╛ ржПржХрзЗ ржПржХрзЗ ржкрзЬрзЗред
// ржкрзНрж░ржержорзЗ ржжрзЗржЦрзЗ a + b тЖТ ржПржЦрж╛ржирзЗ ржжрзБржЯрзЛ рж╕ржВржЦрзНржпрж╛ (10 + 20), рждрж╛ржЗ рж░рзЗржЬрж╛рж▓рзНржЯ рж╣рж▓рзЛ 30
// ржПрж░ржкрж░ 30 ржПрж░ рж╕ржЩрзНржЧрзЗ ржкрж╛рж╢рзЗрж░ рж╕рзНржЯрзНрж░рж┐ржВ "Sum of 10 and 20 is 30" ржХржиржХрзНржпрж╛ржЯ (string ржПрж░ ржорждрзЛ ржЬрзБрзЬрзЗ ржжрзЗрзЯ) ржХрж░рзЗ ржжрзЗрзЯ
// рждрж╛ржЗ ржЪрзВрзЬрж╛ржирзНржд ржЖржЙржЯржкрзБржЯ рж╣рзЯ: "30Sum of 10 and 20 is 30"

/* Type Coercion (ржЯрж╛ржЗржк ржХрзЛржпрж╝рж╛рж░рзНрж╢ржи) */

// console.log("1" - 1); // Output: 0

// ржкрзНрж░рж╕рзЗрж╕ -->

// ржПржЦрж╛ржирзЗ "1" рж╣рж▓рзЛ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ, ржЖрж░ 1 рж╣рж▓рзЛ ржПржХржЯрж┐ ржирж╛ржорзНржмрж╛рж░
// JavaScript ржпржЦржи "-" ржЕржкрж╛рж░рзЗржЯрж░ ржжрзЗржЦрзЗ, рждржЦржи рж╕рзЗржЯрж╛ рж╢рзБржзрзБ рж╕ржВржЦрзНржпрж╛ ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рзЗ
// рждрж╛ржЗ JavaScript рж╕рзНржЯрзНрж░рж┐ржВ "1" ржХрзЗ ржЖржЧрзЗ ржирж╛ржорзНржмрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржирзЗрзЯ (ржПржЯрж╛ржЗ ржЯрж╛ржЗржк ржХрзЛржпрж╝рж╛рж░рзНрж╢ржи)
// рждрж╛рж░ржкрж░ 1 - 1 ржХрж░рзЗ тЖТ рж░рзЗржЬрж╛рж▓рзНржЯ рж╣рзЯ 0


// ржирзЛржЯ: "-", "*", "/" тЖТ ржПржЧрзБрж▓рзЛ рж╕ржмрж╕ржорзЯ ржирж╛ржорзНржмрж╛рж░ ржЯрж╛ржЗржк ржЪрж╛рзЯ
// рждрж╛ржЗ рж╕рзНржЯрзНрж░рж┐ржВ ржерж╛ржХрж▓рзЗржУ рж╕рзЗржЯрж╛ ржирж╛ржорзНржмрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржирзЗрзЯ

// console.log("10" - 2); // 8
// console.log("5" * 2);  // 10
// console.log("20" / 4); // 5

// ржХрж┐ржирзНрждрзБ

// "+" ржЕржкрж╛рж░рзЗржЯрж░ ржжрзБржЗ рж░ржХржо ржХрж╛ржЬ ржХрж░рждрзЗ ржкрж╛рж░рзЗ:
// ржпржжрж┐ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржХржиржХрзНржпрж╛ржЯ ржХрж░рзЗ
// console.log("10" + 2); // "102" тЖТ ржХрж╛рж░ржг ржПржЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВ ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рзЗ ржжрзЗрзЯ


/* Accept and print a number (Type Casting / Type Conversion) */

// let age = prompt("Enter your age:");

// ЁЯСЙ prompt() ржлрж╛ржВрж╢ржи рж╕ржмрж╕ржорзЯ ржЗржиржкрзБржЯржХрзЗ **рж╕рзНржЯрзНрж░рж┐ржВ** рж╣рж┐рж╕рзЗржмрзЗ ржирзЗрзЯ, ржПржоржиржХрж┐ ржЗржЙржЬрж╛рж░ рж╕ржВржЦрзНржпрж╛ ржжрж┐рж▓рзЗржУред

// рждрж╛ржЗ рж╕рзНржЯрзНрж░рж┐ржВ тЖТ ржирж╛ржорзНржмрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рждрзЗ Number() ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐
// age = Number(age);

/*
ржпржжрж┐ ржЗржиржкрзБржЯ ржжрзЗржУрзЯрж╛ рж╕рзНржЯрзНрж░рж┐ржВ-ржЯрж╛ рж╕рждрзНржпрж┐ржЗ ржПржХржЯрж┐ рж╕ржВржЦрзНржпрж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ рж╕рзЗржЯрж╛ ржирж╛ржорзНржмрж╛рж░рзЗ рж░рзВржкрж╛ржирзНрждрж░ рж╣ржмрзЗред
ржиржЗрж▓рзЗ рж░рзЗржЬрж╛рж▓рзНржЯ рж╣ржмрзЗ NaN (Not a Number)

ржЙржжрж╛рж╣рж░ржг:
"рззрзи"    тЖТ рззрзи (number)
"рззрзиa"   тЖТ NaN
"Hamim" тЖТ NaN
*/

// console.log(age);


/* Number to String Conversion (Type Casting / Type Conversion) */

// let a = 12
// a = String(a)
// console.log(typeof(a));

// рж╢рзБржзрзБ ржирж╛ржорзНржмрж╛рж░ржЗ ржиржпрж╝ ржмрж░ржВ рж╕ржВржЦрзНржпрж╛ ржХрзЗ рж╕рзНржЯрзНрж░рж┐ржВ ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ржХрзЗржУ ржЯрж╛ржЗржк ржХрж╛рж╕рзНржЯрж┐ржВ / ржЯрж╛ржЗржк ржХржиржнрж╛рж░рзНрж╕ржи ржмрж▓рж╛ рж╣ржпрж╝


/* Swipe 2 variable via 3 different ways */

// ЁЯУШ Formula One: Swap two values using a temporary variable

// let a = "Hamim";
// let b = "Alif";

// let c; // ржПржХржЯрж┐ ржЕрждрж┐рж░рж┐ржХрзНржд ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ ржирж┐ржЪрзНржЫрж┐ (temporary variable)

// c ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗ a ржПрж░ ржХржкрж┐ рж╕ржВрж░ржХрзНрж╖ржг ржХрж░ржЫрж┐ тЖТ ржПржЦржи c = "Hamim"
// c = a;

// a-рждрзЗ ржПржЦржи b ржПрж░ ржорж╛ржи ржмрж╕рж╛ржЪрзНржЫрж┐ тЖТ ржПржЦржи a = "Alif"
// a = b;

// b-рждрзЗ ржПржЦржи ржкрзБрж░ржирзЛ a ржорж╛ржирзЗ c ржмрж╕рж╛ржЪрзНржЫрж┐ тЖТ ржПржЦржи b = "Hamim"
// b = c;

// console.log("a =", a); // Output: Alif
// console.log("b =", b); // Output: Hamim

// ЁЯФЦ ржирзЛржЯ:
// ржПржЗ ржкржжрзНржзрждрж┐рждрзЗ number, string, boolean ржЗрждрзНржпрж╛ржжрж┐ ржпрзЗржХрзЛржирзЛ ржЯрж╛ржЗржкрзЗрж░ ржнрзНржпрж╛рж▓рзБ swap ржХрж░рж╛ ржпрж╛рзЯ


// formula two *** Swap two numbers using arithmetic operations (no extra variable used) ***


// let a = 15
// let b = 20

// a = b + a // a = 35
// b = a - b // b = 35 - 20 == 15
// a = a - b // a = 35 - 15 == 20

// console.log("a",a);
// console.log("b",b);

// note :: ржПржЗ ржлрж░рзНржорзБрж▓рж╛ ржжрж┐ржпрж╝рзЗ рж╢рзБржзрзБ ржХрзЗржмрж▓ ржорж╛рждрзНрж░ ржирж╛ржорзНржмрж╛рж░ swipe ржХрж░рждрзЗ ржкрж╛рж░ржмрзЗржи рж╕рзНржЯрзНрж░рж┐ржВ ржиржпрж╝


// ЁЯУШ Formula Three: Swap two values using array destructuring (ES6+)

// let a = 12;
// let b = 21;

// [a, b] = [b, a];

// ржорж╛ржирзЗ JavaScript ржПржХрж╕рж╛ржерзЗ ржжрзБржЗржЯрж╛ ржорж╛ржи array ржЖржХрж╛рж░рзЗ ржЕрж╕рзНржерж╛ржпрж╝рзАржнрж╛ржмрзЗ ржзрж░рзЗ рж░рж╛ржЦрзЗ
// рждрж╛рж░ржкрж░ ржбрж╛ржи ржкрж╛рж╢рзЗрж░ ржорж╛ржиржЧрзБрж▓рзЛ ржмрж╛ржо ржкрж╛рж╢рзЗрж░ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓ржЧрзБрж▓рзЛрждрзЗ ржмрж╕рж┐рзЯрзЗ ржжрзЗрзЯ

// console.log("a =", a); // Output: 21
// console.log("b =", b); // Output: 12

/* Arithmetic Operator (+,-,*,/,%) */

// let a = 10;
// let b = 2;

// console.log(a + b); // ржпрзЛржЧржлрж▓: 12
// console.log(a - b); // ржмрж┐рзЯрзЛржЧржлрж▓: 8
// console.log(a * b); // ржЧрзБржгржлрж▓: 20
// console.log(a / b); // ржнрж╛ржЧржлрж▓: 5 (ржорж╛ржирзЗ 10 ржХрзЗ 2 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рж▓рзЗ ржпрж╛ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯ)
// console.log(a % b); // ржнрж╛ржЧрж╢рзЗрж╖: 0 (ржорж╛ржирзЗ 10 ржХрзЗ 2 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рж▓рзЗ ржХрзЛржирзЛ ржнрж╛ржЧрж╢рзЗрж╖ ржерж╛ржХрзЗ ржирж╛)


// Question One: How to get the last digit of any number?

// let a = 1221;
// console.log(a % 10); // Output: 1

// % (ржоржбрзБрж▓рж╛рж╕) ржЕржкрж╛рж░рзЗржЯрж░ ржнрж╛ржЧрж╢рзЗрж╖ ржжрзЗржЦрж╛рзЯред
// ржпржЦржи рждрзБржорж┐ a % 10 рж▓рзЗржЦрзЛ, рждржЦржи рждрзБржорж┐ a рж╕ржВржЦрзНржпрж╛ржЯрж┐ржХрзЗ 10 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░ржЫрзЛ
// ржПржмржВ ржпрж╛ ржнрж╛ржЧрж╢рзЗрж╖ ржерж╛ржХрзЗ рж╕рзЗржЯрж╛ржЗ рж╕ржВржЦрзНржпрж╛ржЯрж┐рж░ рж╢рзЗрж╖ ржЕржЩрзНржХ (last digit) рж╣рзЯред

// тЬЕ ржЙржжрж╛рж╣рж░ржг:
// 1221 % 10 тЖТ ржнрж╛ржЧрж╢рзЗрж╖ 1 тЖТ рж╢рзЗрж╖ ржЕржЩрзНржХ 1
// 879 % 10 тЖТ ржнрж╛ржЧрж╢рзЗрж╖ 9 тЖТ рж╢рзЗрж╖ ржЕржЩрзНржХ 9
// 540 % 10 тЖТ ржнрж╛ржЧрж╢рзЗрж╖ 0 тЖТ рж╢рзЗрж╖ ржЕржЩрзНржХ 0

// Question Two: How to get the first three digits of the number 1221?

// let a = 1221;
// console.log(Math.floor(a / 10)); // Output: 122

// ЁЯФН ржмрзНржпрж╛ржЦрзНржпрж╛:
// 1221 ржПрж░ рж╢рзЗрж╖рзЗрж░ ржПржХ ржЕржЩрзНржХ ржмрж╛ржж ржжрж┐рждрзЗ рж╣рж▓рзЗ 10 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рж▓рзЗржЗ рж╣рзЯред
// 1221 ├╖ 10 = 122.1 тЖТ Math.floor() ржлрж╛ржЩрзНржХрж╢ржи ржжрж┐рзЯрзЗ ржжрж╢ржорж┐ржХ ржмрж╛ржж ржжрж┐рж▓рзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛ржмрзЗ 122

// тЬи рждрж╛ржЗ ржкрзНрж░ржержо рждрж┐ржи ржЕржЩрзНржХ (1, 2, 2) ржЖржорж░рж╛ ржкрзЗрзЯрзЗржЫрж┐ред
// ЁЯУЭ Note:
// рж╢рзБржзрзБ 1221 ржирзЯ тАФ ржпрзЗржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ ржкрзНрж░ржержо ржХрж┐ржЫрзБ ржЕржЩрзНржХ (digit) ржкрзЗрждрзЗ рж╣рж▓рзЗ,
// ржЖржЧрзЗ ржжрзЗржЦрждрзЗ рж╣ржмрзЗ рж╕ржВржЦрзНржпрж╛ржЯрж┐ ржорзЛржЯ ржХрзЯ ржЕржЩрзНржХрзЗрж░ (digit).
// ржПрж░ржкрж░ рждрзБржорж┐ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирзЗржмрзЗ тАФ ржХрждржЯрж┐ ржЕржЩрзНржХ (digit) рж░рж╛ржЦрждрзЗ ржЪрж╛ржУ?

// ЁЯУМ ржХрзМрж╢рж▓:
// ржпржжрж┐ рждрзБржорж┐ ржХрзЛржирзЛ рж╕ржВржЦрзНржпрж╛рж░ рж╢рзБрж░рзБ (first) ржерзЗржХрзЗ N ржЕржЩрзНржХ рж░рж╛ржЦрждрзЗ ржЪрж╛ржУ,
// рждрж╛рж╣рж▓рзЗ рж╕ржВржЦрзНржпрж╛ржЯрж┐ржХрзЗ ржПржоржи ржПржХржЯрж┐ ржорж╛ржи ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рждрзЗ рж╣ржмрзЗ,
// ржпрж╛рждрзЗ рж╢рзЗрж╖рзЗ ржпрзЗрж╕ржм ржЕржЩрзНржХ ржмрж╛ржж ржкрзЬржмрзЗ, рж╕рзЗржЧрзБрж▓рзЛ ржмрж╛ржж ржкрзЬрзЗ ржпрж╛рзЯред

// ЁЯОп ржЙржжрж╛рж╣рж░ржг:
// ржзрж░рзЛ, number = 987654 (6 digit ржПрж░ рж╕ржВржЦрзНржпрж╛)
// рждрзБржорж┐ ржпржжрж┐ ржкрзНрж░ржержо 2ржЯрж┐ ржЕржЩрзНржХ (98) ржкрзЗрждрзЗ ржЪрж╛ржУ,
// рждрж╛рж╣рж▓рзЗ рж╢рзЗрж╖рзЗ 4ржЯрж┐ ржЕржЩрзНржХ ржмрж╛ржж ржжрж┐рждрзЗ рж╣ржмрзЗ тЖТ 10^4 = 10000 ржжрж┐рзЯрзЗ ржнрж╛ржЧ ржХрж░рзЛ

// let number = 987654;
// console.log(Math.floor(number / 10000)); // Output: 98


/* Relation Operator/Comparison Operator (<,>,==,!=,<=,>=)*/

// рж░рж┐рж▓рзЗрж╢ржи ржЕржкрж╛рж░рзЗржЯрж░/ржХржоржкрзНржпрж╛рж░рж┐рж╕ржи ржЕржкрж╛рж░рзЗржЯрж░ рж╕ржмрж╕ржоржпрж╝ ржмрзБрж▓рж┐ржпрж╝рж╛ржи ржнрзНржпрж╛рж▓рзБ (true/false) retun ржХрж░рзЗ

/* Relation Operator / Comparison Operator (<, >, ==, !=, <=, >=) */

// рж░рж┐рж▓рзЗрж╢ржи ржЕржкрж╛рж░рзЗржЯрж░ рж╕ржмрж╕ржорзЯ Boolean ржорж╛ржи рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ тАФ ржЕрж░рзНржерж╛рзО true ржмрж╛ false

// console.log(10 > 5);
// 10 ржХрж┐ 5 ржПрж░ ржЪрзЗрзЯрзЗ ржмрзЬ? тЖТ рж╣рзНржпрж╛ржБ тЬЕ тЖТ ржлрж▓рж╛ржлрж▓: true

// console.log(10 < 5);
// 10 ржХрж┐ 5 ржПрж░ ржЪрзЗрзЯрзЗ ржЫрзЛржЯ? тЖТ ржирж╛ тЭМ тЖТ ржлрж▓рж╛ржлрж▓: false

// console.log(10 == 5);
// 10 ржХрж┐ 5 ржПрж░ рж╕ржорж╛ржи? тЖТ ржирж╛ тЭМ тЖТ ржлрж▓рж╛ржлрж▓: false

// console.log(10 == 10);
// 10 ржХрж┐ 10 ржПрж░ рж╕ржорж╛ржи? тЖТ рж╣рзНржпрж╛ржБ тЬЕ тЖТ ржлрж▓рж╛ржлрж▓: true

// console.log(10 != 10);
// 10 ржХрж┐ 10 ржПрж░ рж╕ржорж╛ржи ржирж╛? тЖТ ржирж╛ тЭМ тЖТ рждрж╛рж░рж╛ рждрзЛ рж╕ржорж╛ржи тЖТ ржлрж▓рж╛ржлрж▓: false

// console.log(10 <= 10);
// 10 ржХрж┐ 10 ржПрж░ ржерзЗржХрзЗ ржЫрзЛржЯ ржЕржержмрж╛ рж╕ржорж╛ржи? тЖТ рж╕ржорж╛ржи тЬЕ тЖТ ржлрж▓рж╛ржлрж▓: true

// console.log(10 >= 10);
// 10 ржХрж┐ 10 ржПрж░ ржерзЗржХрзЗ ржмрзЬ ржЕржержмрж╛ рж╕ржорж╛ржи? тЖТ рж╕ржорж╛ржи тЬЕ тЖТ ржлрж▓рж╛ржлрж▓: true


// >	ржмрзЬ	ржбрж╛ржи ржжрж┐ржХржЯрж╛ ржЫрзЛржЯ (5 < 10) тЖТ ржорзБржЦ ржмрзЬ ржжрж┐ржХрзЗрж░ ржжрж┐ржХрзЗ
// <	ржЫрзЛржЯ	ржмрж╛ржБ ржжрж┐ржХржЯрж╛ ржЫрзЛржЯ (10 > 5)
// ==	рж╕ржорж╛ржи	double equal ржорж╛ржирзЗ ржжрзБржЗржЯрж╛ ржЬрж┐ржирж┐рж╕ ржПржХ (strict mode ржиржпрж╝)
// ===	рж╕ржорж╛ржи	double equal ржорж╛ржирзЗ ржжрзБржЗржЯрж╛ ржЬрж┐ржирж┐рж╕ ржПржХ (strict mode)
// !=	рж╕ржорж╛ржи ржирж╛	"!" = ржирж╛ тЖТ ржорж╛ржирзЗ "рж╕ржорж╛ржи ржирж╛" (strict mode ржиржпрж╝)
// !==	рж╕ржорж╛ржи ржирж╛	"!" = ржирж╛ тЖТ ржорж╛ржирзЗ "рж╕ржорж╛ржи ржирж╛" (strict mode)
// <=	ржЫрзЛржЯ ржЕржержмрж╛ рж╕ржорж╛ржи	less than ржмрж╛ equal ржжрзБржЗржЯрж╛ржЗ ржЪрж▓ржмрзЗ
// >=	ржмрзЬ ржЕржержмрж╛ рж╕ржорж╛ржи	greater than ржмрж╛ equal ржжрзБржЗржЯрж╛ржЗ ржЪрж▓ржмрзЗ

//Note :: strict mode ржмрж▓рждрзЗ ржпржЦржи ржЬрзЗржПрж╕ ржХржоржкрзНржпрж╛рж░рж┐рж╕ржи ржХрж░рзЗ рж╕рзНржЯрзНрж░рж┐ржХрзНржЯ ржорзЛржб ржмрж╛ржжрзЗ рждржЦржи ржпржжрж┐ ржПржХржЯрж┐ рж╕рзНржЯрзНрж░рж┐ржВ ржХрзЗ ржирж╛ржорзНржмрж╛рж░ ржП рж░рзВржкрж╛ржирзНрждрж░ ржХрж░рж╛ ржпрж╛ржпрж╝ рж╕рзЗ ржХрж░рзЗ ржЯрзНрж░рзБ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ ржпрзЗржоржи
// console.log(5=="5");//true
// console.log(5==="5");//false
// console.log(5!="5");//false
// console.log(5!=="5");//true


// ЁЯУЭ Note:
// рж╕ржмрж╕ржорзЯ ржоржирзЗ рж░рж╛ржЦржмрзЗ тАФ ржпрзЗржжрж┐ржХрзЗ > ржПрж░ ржорзБржЦ ржерж╛ржХржмрзЗ, рж╕рзЗржжрж┐ржХрзЗрж░ рж╕ржВржЦрзНржпрж╛ ржмрзЬ рж╣ржмрзЗред

// ржЙржжрж╛рж╣рж░ржг:

// console.log(10 > 5);
// ржПржЦрж╛ржирзЗ > ржорзБржЦ 10 ржПрж░ ржжрж┐ржХрзЗ ржЦрзЛрж▓рж╛ тЗТ рждрж╛ржЗ 10 ржмрзЬ 5 ржПрж░ ржЪрзЗрзЯрзЗ тЗТ true

// console.log(5 < 10);
// ржПржЦрж╛ржирзЗ < ржорзБржЦ 10 ржПрж░ ржжрж┐ржХрзЗ ржЦрзЛрж▓рж╛ тЗТ рждрж╛ржЗ 10 ржмрзЬ 5 ржПрж░ ржЪрзЗрзЯрзЗ тЗТ true

/* Relation Operator (&&, ||) */

// && (AND) ржПржмржВ || (OR) тАФ ржПрж░рж╛ ржжрзБржЗржЯрж┐ ржмрж╛ ржПржХрж╛ржзрж┐ржХ рж╢рж░рзНржд ржирж┐рзЯрзЗ ржХрж╛ржЬ ржХрж░рзЗ
// ржПржЧрзБрж▓рзЛ рж╕ржмрж╕ржорзЯ true ржмрж╛ false рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗ (Boolean value)

// тЬЕ && (AND):
// ржжрзБржЗ ржмрж╛ рждрждрзЛржзрж┐ржХ рж╢рж░рзНржд ржпржжрж┐ рж╕ржмржЧрзБрж▓рзЛржЗ рж╕рждрзНржп рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржлрж▓рж╛ржлрж▓ рж╣ржмрзЗ true
// ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ false рж╣рж▓рзЗржЗ ржлрж▓рж╛ржлрж▓ false рж╣рзЯрзЗ ржпрж╛ржмрзЗ

// console.log(10 < 11 && 11 > 5); // true
// console.log(10 < 11 && 11 < 5); // false

// && рж╕ржмрж╕ржорзЯ рждрж╛рж░ ржЙржнржпрж╝ ржкрж╛рж╢рзЗрж░ (ржмрж╛ ржпрждржЧрзБрж▓рзЛ рж╢рж░рзНржд ржерж╛ржХрзЗ) рж╕рждрзНржпрждрж╛ ржпрж╛ржЪрж╛ржЗ ржХрж░рзЗ

// console.log(10 < 11 && 11 > 5 && "Hamim" === "Hamim"); // true

// ржпрждржЧрзБрж▓рзЛ && ржерж╛ржХржмрзЗ ржПржХржЯрж┐ рж▓ржЬрж┐ржХрзЗ, рждрждржЧрзБрж▓рзЛ рж╢рж░рзНрждржЗ ржЪрзЗржХ ржХрж░ржмрзЗ
// рж╕ржмржЧрзБрж▓рзЛржЗ true рж╣рж▓рзЗ рждржмрзЗржЗ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ

// console.log(15 < 11 && 11 > 5 && "Hamim" === "Hamim"); // false

// ржпржжрж┐ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж┐ рж╢рж░рзНржд false рж╣ржпрж╝,
// JavaScript ржЗржЮрзНржЬрж┐ржи ржПрж░ржкрж░ ржЖрж░ ржмрж╛ржХрж┐ рж╢рж░рзНрждржЧрзБрж▓рзЛ ржЪрзЗржХ ржХрж░рзЗ ржирж╛
// ржХрж╛рж░ржг ржкрзНрж░ржержорзЗржЗ false ржкрзЗрзЯрзЗ ржЧрзЗржЫрзЗ, рждрж╛ржЗ рж╢рзЗрж╖ ржлрж▓рж╛ржлрж▓ false рж╣ржмрзЗ
// ржПржЯрж╛ржХрзЗ ржмрж▓рж╛ рж╣рзЯ short-circuit evaluation

// || (OR) ржЕржкрж╛рж░рзЗржЯрж░:

// ржпржжрж┐ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж╛ рж╢рж░рзНржд true рж╣рзЯ рждрж╛рж╣рж▓рзЗ рж╕рзЗ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ
// рж╕ржмржЧрзБрж▓рзЛ рж╢рж░рзНржд ржпржжрж┐ false рж╣рзЯ, рждрж╛рж╣рж▓рзЗржЗ ржХрзЗржмрж▓ false рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ

// console.log(10<5 || 5<3); //false
// ржХрж╛рж░ржг ржжрзБржЗржЯрж╛ржЗ ржнрзБрж▓, рждрж╛ржЗ false

// console.log(10<5 || 5<10); //true
// ржХрж╛рж░ржг ржжрзНржмрж┐рждрзАрзЯржЯрж╛ ржарж┐ржХ тАФ рждрж╛ржЗ true

// console.log(10>5 || 10<5 || "Hamim"==="Hamim"); //true
// ржкрзНрж░ржержоржЯрж╛ржЗ true ржкрзЗрзЯрзЗ ржЧрзЗржЫрзЗ, рждрж╛ржЗ ржмрж╛ржХрж┐ржЧрзБрж▓рзЛ ржЪрзЗржХржЗ ржХрж░рзЗржирж┐

// || ржЕржкрж╛рж░рзЗржЯрж░ ржпрзЗржЗржЯрж╛ ржЖржЧрзЗ true ржкрж╛ржмрзЗ рж╕рзЗржЦрж╛ржирзЗржЗ ржерзЗржорзЗ ржпрж╛ржмрзЗ
// ржПржЯрж╛ржХрзЗржЗ ржмрж▓рзЗ short-circuit

//ржпрждржЧрзБрж▓рзЛ || ржерж╛ржХржмрзЗ, рждрж╛рж░ ржоржзрзНржпрзЗ ржпрзЗржХрзЛржирзЛ ржПржХржЯрж╛ржУ true рж╣рж▓рзЗржЗ рж╕рзЗ true рж░рж┐ржЯрж╛рж░рзНржи ржХрж░ржмрзЗ

//Note :: || ржЕржкрж╛рж░рзЗржЯрж░ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЗ тАФ тАЬржПржХржЬржи ржарж┐ржХ ржерж╛ржХрж▓рзЗржЗ ржЖржорж┐ ржЦрзБрж╢рж┐тАЭ

/* Unary Operator ( --,++ )*/

// ++ = increment ржЕржкрж╛рж░рзЗржЯрж░

// let a = 10;
// let b = a++; // post increment

// console.log(a); // 11
// console.log(b); // 10 тЭЧ

// post increment --> ржХрзЛржирзЛ ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржкрж╛рж╢рзЗ ржпржЦржи ++ ржмрж╕рзЗ
// рждрж╛ржХрзЗ ржмрж▓рж╛ рж╣рзЯ post increment

// ржкрзНрж░рж╢рзНржи: b ржПрж░ ржнрзНржпрж╛рж▓рзБ 10 ржХрзЗржи? a рждрзЛ 11 рж╣рж▓рзЛ!
// ржХрж╛рж░ржг: b рждрзЗ a ржПрж░ ржкрзБрж░рж╛ржирзЛ ржорж╛ржи ржХржкрж┐ рж╣рзЯрзЗржЫрзЗ
// increment рж╣рзЯрзЗржЫрзЗ ржкрж░рзЗ, b рждрзЗ рждржЦржиржУ ржкрзБрж░рж╛рждржи ржорж╛ржиржЗ ржЫрж┐рж▓

// ЁЯСЙ post increment ржорж╛ржирзЗ ржЖржЧрзЗ ржорж╛ржи ржирзЗрзЯ, ржкрж░рзЗ 1 ржмрж╛рзЬрж╛рзЯ


// -- = decrement ржЕржкрж╛рж░рзЗржЯрж░

// let a = 10;
// let b = a--; // post decrement

// console.log(a); // 9
// console.log(b); // 10

// post decrement --> ржпржЦржи ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржкрж╛рж╢рзЗ -- ржерж╛ржХрзЗ
// ржорж╛ржирзЗ рж╣ржЪрзНржЫрзЗ ржЖржЧрзЗ ржорж╛ржи ржирзЗрзЯ, ржкрж░рзЗ рзз ржХржорж╛рзЯ

// b рждрзЗ a ржПрж░ ржкрзБрж░рж╛ржирзЛ ржорж╛ржи ржХржкрж┐ рж╣рзЯрзЗржЫрзЗ
// рждрж╛рж░ржкрж░ a ржПрж░ ржорж╛ржи ржХржорзЗ ржЧрзЗржЫрзЗ рзп рж╣рзЯрзЗржЫрзЗ

// ЁЯСЙ post decrement ржорж╛ржирзЗ: ржЖржЧрзЗрж░ ржорж╛ржирзЗ ржХрж╛ржЬ ржХрж░рзЛ, ржкрж░рзЗ рзз ржХржорж╛ржУ

// Pre Increment

// let a = 10;
// let b = ++a; // pre increment

// console.log(a); // 11
// console.log(b); // 11

// pre increment --> ржпржЦржи ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржЖржЧрзЗ ++ ржмрж╕рзЗ
// рждржЦржи рж╕рзЗржЯрж╛ ржЖржЧрзЗ рзз ржмрж╛рзЬрж╛рзЯ, рждрж╛рж░ржкрж░ ржорж╛ржи ржирзЗрзЯ

// ржПржЦрж╛ржирзЗ a ржПрж░ ржорж╛ржи ржЫрж┐рж▓ 10
// ++a ржорж╛ржирзЗ ржЖржЧрзЗ рзз ржмрж╛рзЬрж╛ржУ тЖТ ржПржЦржи a = 11
// ржПрж░ржкрж░ рж╕рзЗржЗ 11 b рждрзЗ ржХржкрж┐ рж╣рзЯрзЗржЫрзЗ

// ЁЯСЙ pre increment ржорж╛ржирзЗ: ржЖржЧрзЗ ржмрж╛рзЬрж╛ржУ, ржкрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ

// pre decrement
// let a = 10;
// let b = --a; // pre decrement

// console.log(a); // 9
// console.log(b); // 9

// pre decrement --> ржпржЦржи ржнрзНржпрж╛рж░рж┐рзЯрзЗржмрж▓рзЗрж░ ржЖржЧрзЗ -- ржмрж╕рзЗ,
// рждржЦржи рж╕рзЗ ржЖржЧрзЗ рзз ржХржорж╛рзЯ рждрж╛рж░ржкрж░ рж╕рзЗржЗ ржорж╛ржи ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ

// ржПржЦрж╛ржирзЗ a ржПрж░ ржорж╛ржи ржЫрж┐рж▓ 10
// --a ржорж╛ржирзЗ ржЖржЧрзЗ рзз ржХржорж╛ржУ тЖТ ржПржЦржи a = 9
// ржПрж░ржкрж░ рж╕рзЗржЗ 9 b рждрзЗ ржХржкрж┐ рж╣рзЯрзЗржЫрзЗ

// ЁЯСЙ pre decrement ржорж╛ржирзЗ: ржЖржЧрзЗ ржХржорж╛ржУ, ржкрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ

